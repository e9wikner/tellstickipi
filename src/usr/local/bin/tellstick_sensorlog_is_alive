#!/usr/bin/env python
""" This script checks that the tellstick log folder is getting updates.

If not it's an indication that something is wrong and needs some user attention.
"""
import argparse
import json
import logging
import re
import subprocess
import sys
from datetime import datetime


DEFAULT_FOLDER = '/var/lib/tellsticklogger'
DEFAULT_TIMEOUT = 600


class TellstickSensorTimeout(Exception):
    pass


def parse_sys_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--folder', default=DEFAULT_FOLDER,
                        help='Tellstick logger folder, default={}'.format(DEFAULT_FOLDER))
    parser.add_argument('-t', '--timeout', default=DEFAULT_TIMEOUT, type=int,
                        help='Timeout in seconds, default={}s'.format(DEFAULT_TIMEOUT))
    parser.add_argument('-i', '--ignore', nargs='+',
                        default=set(), help='Sensor ids to ignore in detection')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Increase program verbosity')
    return parser.parse_args()


def map_sensor_id_to_seconds_since_last_update(folder):
    """Map sensor id to seconds since last update"""
    folder_status = subprocess.check_output(
        ['ls', '-bg', '--time-style=full-iso', folder], universal_newlines=True)

    changes = dict()
    now = datetime.now()
    logging.debug('time is now {}'.format(now))
    for line in folder_status.splitlines()[1:]:  # First line shows totals
        columns = line.split(' ')
        filename = columns[-1]
        date = ' '.join(columns[-4:-2])[:-3]  # :-3 To exclude nanoseconds
        last_change = datetime.strptime(date, "%Y-%m-%d %H:%M:%S.%f")
        try:
            id_ = re.search(r'(\d+)\.csv', filename).group(1)
        except AttributeError:
            if '.csv' in filename:
                logging.debug('no id found in "{}"'.format(line))
        else:
            logging.debug('sensor {} was logged {}'.format(id_, last_change))
            timedelta = now - last_change
            changes[id_] = timedelta.seconds
    return changes


def main():
    args = parse_sys_args()
    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s')

    sensors_seconds_since_change = map_sensor_id_to_seconds_since_last_update(args.folder)
    logging.info('Seconds since update (\'id\':s): {}'
                 .format(sensors_seconds_since_change))

    ids_timed_out = [id_ for id_ in sensors_seconds_since_change
                     if (id_ not in args.ignore and
                         sensors_seconds_since_change[id_] > args.timeout)]
    if ids_timed_out:
        message = ('Timout ({}s) was detected for sensor id(s) {}'
                   .format(args.timeout, ', '.join(ids_timed_out)))
        raise TellstickSensorTimeout(message)

    logging.info('No timeout detected')


if __name__=='__main__':
    try:
        main()
    except TellstickSensorTimeout as err:
        logging.error(err)
        sys.exit(1)
